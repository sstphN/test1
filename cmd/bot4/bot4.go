package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"testkursa/internal/privateapi"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var userSelections = make(map[int64]UserSelection)

type UserSelection struct {
	Action    string
	Timeframe string
}

func main() {
	// –ó–∞–º–µ–Ω–∏—Ç–µ "your_bot4_token_here" –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ Bot4
	botToken := os.Getenv("BOT4_TOKEN")
	if botToken == "" {
		log.Fatal("Bot token is empty")
	}

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatal(err)
	}

	bot.Debug = true
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ–¥ –∞–∫–∫–∞—É–Ω—Ç–æ–º %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	log.Println("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")

	for update := range updates {
		if update.Message != nil {
			log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", update.Message.Chat.ID, update.Message.Text)
			HandleMessage(bot, update.Message)
		} else if update.CallbackQuery != nil {
			log.Printf("–ü–æ–ª—É—á–µ–Ω CallbackQuery –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", update.CallbackQuery.From.ID, update.CallbackQuery.Data)
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ CallbackQuery, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
		} else {
			log.Printf("–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: %+v", update)
		}
	}
}

func HandleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	text := message.Text

	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", chatID, text)

	if strings.HasPrefix(text, "/start") {
		// –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start
		params := strings.SplitN(text, " ", 2)
		if len(params) > 1 {
			selectionParam := params[1]
			parts := strings.SplitN(selectionParam, "_", 2)
			if len(parts) == 2 {
				userSelections[chatID] = UserSelection{
					Action:    parts[0],
					Timeframe: parts[1],
				}
				log.Printf("–ü–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: Action=%s, Timeframe=%s –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", parts[0], parts[1], chatID)
			} else {
				msg := tgbotapi.NewMessage(chatID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ.")
				if _, err := bot.Send(msg); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", chatID, err)
				}
				return
			}
		} else {
			msg := tgbotapi.NewMessage(chatID, "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ.")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", chatID, err)
			}
			return
		}

		msg := tgbotapi.NewMessage(chatID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ë–æ—Ç –Ω–∞—á–Ω—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –¥–∞–Ω–Ω—ã–µ.")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", chatID, err)
		}

		// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
		go sendDataPeriodically(bot, chatID)
	} else if text == "/stop" {
		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
		delete(userSelections, chatID)
		msg := tgbotapi.NewMessage(chatID, "–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", chatID, err)
		}
	} else {
		msg := tgbotapi.NewMessage(chatID, "–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–º –¥–∞–Ω–Ω—ã–µ. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", chatID, err)
		}
	}
}

func sendDataPeriodically(bot *tgbotapi.BotAPI, chatID int64) {
	ticker := time.NewTicker(1 * time.Minute) // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (1 –º–∏–Ω—É—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
	defer ticker.Stop()

	for {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—ë –µ—â—ë —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
		if _, exists := userSelections[chatID]; !exists {
			log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", chatID)
			return
		}

		sendData(bot, chatID)

		<-ticker.C
	}
}

func sendData(bot *tgbotapi.BotAPI, chatID int64) {
	selection, exists := userSelections[chatID]
	if !exists {
		log.Printf("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", chatID)
		return
	}

	var messageText string

	switch selection.Action {
	case "action_gainers":
		topGainers, err := privateapi.FetchTopGainers("futures", selection.Timeframe)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø-–≥–µ–π–Ω–µ—Ä–æ–≤:", err)
			messageText = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
		} else {
			messageText = FormatGainersMessage(topGainers, "futures", selection.Timeframe)
		}
	case "action_pumpdump":
		pumpDumpTickers, err := privateapi.FetchPumpDump("futures", selection.Timeframe)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö (pumpdump):", err)
			messageText = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
		} else {
			messageText = FormatPumpDumpMessage(pumpDumpTickers, "futures", selection.Timeframe)
		}
	default:
		messageText = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
	}

	log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d", chatID)
	msg := tgbotapi.NewMessage(chatID, messageText)
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", chatID, err)
	}
}

func FormatGainersMessage(tickers []privateapi.Ticker, market, timeframe string) string {
	message := fmt.Sprintf("–¢–æ–ø-–≥–µ–π–Ω–µ—Ä—ã –Ω–∞ —Ä—ã–Ω–∫–µ %s –∑–∞ %s:\n", market, timeframe)
	for _, ticker := range tickers {
		message += fmt.Sprintf("%s: %s%%\n", ticker.Symbol, ticker.PriceChangePercent)
	}
	return message
}

func FormatPumpDumpMessage(tickers []privateapi.Ticker, market, timeframe string) string {
	message := ""
	for _, ticker := range tickers {
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
		changePercent, _ := strconv.ParseFloat(ticker.PriceChangePercent, 64)
		directionEmoji := "üî¥"
		if changePercent > 0 {
			directionEmoji = "üü¢"
		}

		// –û–±—ä—ë–º
		formattedVolume := formatVolume(ticker.Volume)

		// –î–∞–Ω–Ω—ã–µ –æ Max Dump –∏ Max Pump –∑–∞ 24 —á–∞—Å–∞
		message += fmt.Sprintf("[‚ùï %s %s %s%% / 9.9s\n24H Vol: %s\nMax Dump: -%s%% Max Pump: +%s%%]\n\n",
			directionEmoji, ticker.Symbol, ticker.PriceChangePercent, formattedVolume, ticker.MaxDump, ticker.MaxPump)
	}
	return message
}

func formatVolume(volumeStr string) string {
	volume, _ := strconv.ParseFloat(volumeStr, 64)
	if volume >= 1e9 {
		return fmt.Sprintf("%.3f B", volume/1e9)
	} else if volume >= 1e6 {
		return fmt.Sprintf("%.3f M", volume/1e6)
	} else if volume >= 1e3 {
		return fmt.Sprintf("%.3f K", volume/1e3)
	}
	return fmt.Sprintf("%.3f", volume)
}
